{{range services}}{{key "service/.Name"}}{{$service:=.Name}}{{range .Tags}}{{if eq . "https-hoist-io" }}
upstream {{$service}}_upstream {
  least_conn;
  {{range service $service "passing" }}server {{.Address}}:{{.Port}} max_fails=3 fail_timeout=60 weight=1;
  {{else}}server 127.0.0.1:65535; # force a 502 {{end}}
}
server {
    listen        80;
    server_name   {{$service}}.hoist.io;
    rewrite       ^ https://$server_name$request_uri? permanent;
}
server {
        root    /pages;
        listen 443 ssl;

        error_page 500 502 503 504 /500.html;

        error_page 404 /404.html;

        location = /404.html {
            root    /pages;
            allow   all;
        }
        location = /500.html {
            root    /pages;
            allow   all;
        }
        server_name {{$service}}.hoist.io;

        ssl_certificate /certs/hoist.io.crt;
        ssl_certificate_key /certs/hoist.io.key;

        ssl_prefer_server_ciphers on;
        ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
        ssl_ciphers ECDH+AESGCM:DH+AESGCM:ECDH+AES256:DH+AES256:ECDH+AES128:DH+AES:ECDH+3DES:DH+3DES:RSA+AESGCM:RSA+AES:RSA+3DES:!aNULL:!MD5:!DSS:!AES256;
        ssl_session_cache shared:SSL:10m;
        ssl_session_timeout 10m;
        ssl_stapling on;

        add_header Strict-Transport-Security max-age=31536000;

        add_header x-hoist-s $hostname always;

        client_max_body_size 100M;

        location / {
          proxy_redirect off;
          proxy_intercept_errors on;
          proxy_buffering off;
          proxy_set_header   X-Real-IP $remote_addr;
          proxy_set_header   X-Forwarded-For  $proxy_add_x_forwarded_for;
          proxy_set_header   X-Forwarded-Proto https;
          proxy_set_header   Host $host;
          proxy_http_version 1.1;
          proxy_set_header Upgrade $http_upgrade;
          proxy_set_header Connection "upgrade";
          proxy_pass_request_headers  on;
          proxy_pass         http://{{$service}}_upstream;
        }
}{{end}}{{end}}{{end}}
{{range services}}{{key "service/.Name"}}{{$service:=.Name}}{{range .Tags}}{{if eq . "https-hoi-io" }}
upstream {{$service}}_upstream {
  least_conn;
  {{range service $service "passing" }}server {{.Address}}:{{.Port}} max_fails=3 fail_timeout=60 weight=1;
  {{else}}server 127.0.0.1:65535; # force a 502 {{end}}
}
server {
    listen        80;
    server_name   {{$service}}.hoi.io;
    rewrite       ^ https://$server_name$request_uri? permanent;
}
server {
        root    /pages;
        listen 443 ssl;

        error_page 500 502 503 504 /500.html;

        error_page 404 /404.html;

        location = /404.html {
            root    /pages;
            allow   all;
        }
        location = /500.html {
            root    /pages;
            allow   all;
        }

        server_name {{$service}}.hoi.io;

        ssl_certificate /certs/hoi.io.crt;
        ssl_certificate_key /certs/hoi.io.key;

        ssl_prefer_server_ciphers on;
        ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
        ssl_ciphers ECDH+AESGCM:DH+AESGCM:ECDH+AES256:DH+AES256:ECDH+AES128:DH+AES:ECDH+3DES:DH+3DES:RSA+AESGCM:RSA+AES:RSA+3DES:!aNULL:!MD5:!DSS:!AES256;
        ssl_session_cache shared:SSL:10m;
        ssl_session_timeout 10m;
        ssl_stapling on;

        add_header Strict-Transport-Security max-age=31536000;

        add_header x-hoist-s $hostname always;

        client_max_body_size 100M;


        location / {
          proxy_redirect off;
          proxy_intercept_errors on;
          proxy_buffering off;
          proxy_set_header   X-Real-IP $remote_addr;
          proxy_set_header   X-Forwarded-For  $proxy_add_x_forwarded_for;
          proxy_set_header   X-Forwarded-Proto https;
          proxy_set_header   Host $host;
          proxy_http_version 1.1;
          proxy_set_header Upgrade $http_upgrade;
          proxy_set_header Connection "upgrade";
          proxy_pass_request_headers  on;
          proxy_pass         http://{{$service}}_upstream;
          proxy_read_timeout 1200s;
        }
}{{end}}{{end}}{{end}}
server {
  listen 80 default_server;

  error_page 500 502 503 504 /500.html;

  error_page 404 /404.html;

  add_header x-hoist-s $hostname always;

  location = /404.html {
      root    /pages;
      allow   all;
  }
  location = /500.html {
      root    /pages;
      allow   all;
  }

  location = /elb-health {
    return 200;
  }

  location / {
    return 404;
  }
}
